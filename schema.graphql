# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

type Stats @entity {
  """
  ID corresponding to event section.method
  """
  id: ID!
  """
  Number of events encountered in indexed blocks
  """
  number: Int!
  """
  The block height of the first encounter
  """
  firstBlockNumber: Int!
  """
  The timestamp of the first encounter
  """
  firstTimestamp: Date!
  """
  The block height of the last encounter
  """
  lastBlockNumber: Int!
  """
  The timestamp of the last encounter
  """
  lastTimestamp: Date!
}

type Transfer @entity {
  """
  id field is always required and must look like this
  """
  id: ID!
  """
  The block height of the transfer
  """
  blockNumber: Int! @index
  """
  The timestamp of the transfer
  """
  timestamp: Date! @index
  """
  Amount that is transferred
  """
  amount: BigInt!
  """
  The account that transfers are made from
  """
  from: Account!
  """
  The account that transfers are made to
  """
  to: Account!
}

type Account @entity {
  """
  id field is always required and must look like this
  """
  id: ID!
  """
  The public key of this account (same across all Polkadot parachains)
  """
  publicKey: Bytes!
  sentTransfers: [Transfer!]! @derivedFrom(field: "from")
  receivedTransfers: [Transfer!]! @derivedFrom(field: "to")
  multiOrigin: MultiOrigin

  """
  If this account is a processor he can have a manager paired

  It relates to `Manager` but indirectly to an account since `Manager` and `Account` have one-to-one relationship.
  """
  manager: Manager

  heartbeats: [Heartbeat!]! @derivedFrom(field: "processor")
  attestation: [Attestation!]! @derivedFrom(field: "processor")
}

enum MultiOriginVariant {
  Acurast
  Tezos
  Ethereum
  AlephZero
  Vara
}

type MultiOrigin @entity {
  id: ID!
  originVariant: MultiOriginVariant!
  # due to a bug we cannot have indexes on enums
  originVariantString: String! @index
  origin: Bytes! @index
  """
  The linked account in case of originVariant==Acurast
  """
  account: Account

  allowedAsConsumer: [AdAllowsConsumer!] @derivedFrom(field: "consumer")
}

type AdAllowsConsumer @entity {
  id: ID!
  ad: Advertisement!
  consumer: MultiOrigin!
}

type Advertisement @entity {
  id: ID!
  processor: Account!
  """
  The block height of the first encounter
  """
  blockNumber: Int! @index
  """
  The timestamp of the first encounter
  """
  timestamp: Date! @index

  schedulingWindowVariant: SchedulingWindowVariant!
  schedulingWindowEnd: Date
  schedulingWindowDelta: BigInt
  feePerMillisecond: BigInt!
  feePerStorageByte: BigInt!
  baseFeePerExecution: BigInt!
  maxMemory: BigInt!
  storageCapacity: BigInt!
  allowedConsumers: [AdAllowsConsumer!] @derivedFrom(field: "ad")
  availableModuleDataEncryption: Boolean!
  networkRequestQuota: BigInt!

  remainingStorageCapacity: BigInt

  removed: Boolean!
}

type Heartbeat @entity {
  id: ID!
  processor: Account!
  """
  The block height of the first encounter
  """
  blockNumber: Int! @index
  """
  The timestamp of the first encounter
  """
  timestamp: Date! @index

  platform: Int @index
  build_number: Int @index
}

type ProcessorReward @entity {
  id: ID!
  processor: Account!
  """
  The block height of the first encounter
  """
  blockNumber: Int! @index
  """
  The timestamp of the first encounter
  """
  timestamp: Date! @index
  amount: BigInt!
}

type RemainingStorageCapacity @entity {
  id: ID!
  processor: Advertisement!
  timestamp: Date! @index
  remainingStorageCapacity: BigInt
}

type Attestation @entity {
  id: ID!
  processor: Account!
  """
  The block height of the first encounter
  """
  blockNumber: Int! @index
  """
  The timestamp of the first encounter
  """
  timestamp: Date! @index

  notBefore: BigInt
  notAfter: BigInt

  raw: String
}

enum SchedulingWindowVariant {
  End
  Delta
}

type Job @entity {
  id: ID!
  # fields building the unique job_id
  origin: Bytes! @index(unique: true)
  originVariant: MultiOriginVariant!
  # link to Account entity if it's an Acurast address that registered
  originAccount: Account
  jobIdSeq: BigInt! @index(unique: true)

  script: String!
  allowedProcessors: [JobAllowsProcessor!] @derivedFrom(field: "job")
  allowOnlyVerifiedProcessors: Boolean!
  memory: BigInt!
  networkRequests: BigInt!
  storage: BigInt!
  requiredModuleDataEncryption: Boolean!

  # schedule
  duration: BigInt!
  startTime: Date!
  endTime: Date!
  interval: BigInt!
  maxStartDelay: BigInt!

  # extra.requirements
  slots: Int!
  reward: BigInt!
  minReputation: BigInt
  assignmentStrategy: AssignmentStrategy!

  matches: [Match!]! @derivedFrom(field: "job")

  # redundant field for fast filtering by status
  status: JobStatus!
  statusChanges: [JobStatusChange!]! @derivedFrom(field: "job")
}

enum AssignmentStrategy {
  Single
  Competing
}

type JobAllowsProcessor @entity {
  id: ID!
  processor: Account!
  job: Job!
}

type JobStatusChange @entity {
  id: ID!
  job: Job!
  """
  The block height of the status change
  """
  blockNumber: Int! @index
  """
  The timestamp of the status change
  """
  timestamp: Date! @index
  status: JobStatus!
}

enum JobStatus {
  Open
  Matched
  Assigned
  Removed
}

type Assignment @entity {
  id: ID!
  match: Match!

  feePerExecution: BigInt!

  sla: SLA!
  pubKeys: PubKeys!

  """
  The block height of the assignment (match acknowledgment)
  """
  blockNumber: Int! @index
  """
  The timestamp of the assignment (match acknowledgment)
  """
  timestamp: Date! @index

  reports: [Report!]! @derivedFrom(field: "assignment")
  finalizations: [Finalization!]! @derivedFrom(field: "assignment")
}

type Match @entity {
  id: ID!
  processor: Account!
  job: Job!

  slot: Int!
  """
  The execution assigned. Null means all of them. (reflects sum type used in runtime)

  This field is sourced from two different events: JobRegistrationMatched and JobExecutionMatched
  """
  execution: Int @index
  startDelay: BigInt!
  instant: Boolean!
  """
  The block height of the match; can be identical to job.blockNumber for instant matches
  """
  blockNumber: Int! @index
  """
  The timestamp of the match; can be identical to job.timestamp for instant matches
  """
  timestamp: Date! @index

  assignments: [Assignment!]! @derivedFrom(field: "match")
}

type SLA @jsonField {
  total: Int!
  met: Int!
}

type PubKeys @jsonField {
  SECP256r1: String
  SECP256k1: String
  ED25519: String
  SECP256r1Encryption: String
  SECP256k1Encryption: String
}

type Report @entity {
  id: ID!
  assignment: Assignment!
  """
  The block height of the report
  """
  blockNumber: Int! @index
  """
  The timestamp of the report
  """
  timestamp: Date! @index
  variant: ReportVariant!
  operationHash: String
  errorMessage: String
}

enum ReportVariant {
  Success
  Failure
}

type Finalization @entity {
  id: ID!
  assignment: Assignment!
  """
  The block height of the report
  """
  blockNumber: Int! @index
  """
  The timestamp of the report
  """
  timestamp: Date! @index
}

type Manager @entity {
  id: ID!
  """
  One-to-one relation, nullable on account so that all of this type's fields are mandatory if a manager was created for account.
  """
  account: Account!
  managedProcessors: [Account!]! @derivedFrom(field: "manager")
  managerId: BigInt!

  processors: [Account!]! @derivedFrom(field: "manager")

  """
  The block height when the manager was created
  """
  blockNumber: Int! @index
  """
  The timestamp when the manager was created
  """
  timestamp: Date! @index
}
